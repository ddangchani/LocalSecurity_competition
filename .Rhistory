z=c(1:3,NA)
is.na(z)
"+"(2,3)
3*c(1,2,3,NA)
substr(c('monday','tuesday','wednesday'),1,2)
nchar('statistics')
length('statistics')
f <- function(x,a) return((x-a)^2)
f(1:2,3)
mean(c(1,2,3,NA))
mean(c(1,2,3,NA),na.rm = T)
library(datasets)
datasets::cars
df <= datasets::airquality
df = datasets::airquality
df
View(df)
df$Wind
install.packages()
install.packages()
install.packages('tidyverse')
library(tidyverse)
install.packages('jsonlite')
.libPaths()
install.packages('jsonlite')
library(tidyverse)
library(arima)
library(stats)
par(mfrow=c(2,1))
plot(arima.sim(list(order=c(0,0,1), ma=.5), n=100, ylab="x", main=(expression(MA(1)~~~tjeta==+.5))))
plot(arima.sim(list(order=c(0,0,1), ma=.5), n=100, ylab="x", main=(expression(MA(1)~~~theta==+.5))))
plot(arima.sim(list(order=c(0,0,1), ma=.5), n=100, ylab="x", main=(expression(MA(1)~~~theta==+.5)))
plot(
arima.sim(list(order=c(0,0,1), ma=0.5), n=100),
ylab="x"
)
plot(arima.sim(list(order=c(0,0,1), ma=.5), n=100), ylab="x",
main=(expression(MA(1)~~~theta==+.5)))
plot(arima.sim(list(order=c(0,0,1), ma=-.5), n=100), ylab="x",
main=(expression(MA(1)~~~theta==-.5)))
plot(arima.sim(list(order=c(0,0,1), ma=.5), n=100), ylab="x",
main=(expression(MA(1)~~~theta==+.5)))
setwd('/Desktop/')
KP2020 <- read.csv('Desktop/스마트치안대회/data/KP2020.csv')
KP2020 <- read.csv('Desktop/스마트치안대회/data/KP2020.csv', encoding = 'cp949')
KP2020 <- read.csv('Desktop/스마트치안대회/data/KP2020.csv', encoding = 'euc-kr')
KP2020 <- read.csv('Desktop/스마트치안대회/data/KP2020.csv', encoding = 'euc-kr')
KP2020 <- read.csv('Desktop/스마트치안대회/data/KP2020.csv', encoding = 'utf-8')
KP2020 <- read.csv('Desktop/스마트치안대회/data/KP2020.csv')
install.packages('kernelboot')
data
df = read.csv('~Desktop/Github/Localsecurity_competition/STKDE/data.csv')
library(readr)
df <- read_csv("Desktop/Github/LocalSecurity_competition/STKDE/data.csv",
col_types = cols(RECV_CPLT_DM = col_skip(),
geometry = col_skip()))
View(df)
df
options(digits = 10)
library(readr)
df <- read_csv("Desktop/Github/LocalSecurity_competition/STKDE/data.csv",
col_types = cols(RECV_CPLT_DM = col_skip(),
geometry = col_skip()))
bw.silv(df)
library(kernelboot)
bw.silv(df)
bw.scott(df)
install.packages()
install.packages('spattemp')
install.packages('sparr')
library(sparr)
ppp(df$X, df$Y)
min(df$X)
df[,2:3]
windows <- c(min(df$X),max(df$X))
windows <- c(min(df$X),max(df$X),min(df$Y),max(df$Y))
as.ppp(df[,2:3], windows)
df_ppp = as.ppp(df[,2:3], windows)
View(df_ppp)
spattemp
library(spatstat)
library(spattemp)
install.packages('spattemp')
library(sparr)
df = read.csv("~Desktop/Github/Localsecurity_competiton/STKDE/data_100M.csv")
df = read.csv("~Desktop/Github/LocalSecurity_competiton/STKDE/data_100M.csv")
df = read.csv("~/Desktop/Github/LocalSecurity_competition/STKDE/data_100M.csv")
data(fmd)
library(sparr)
capabilities("tclick")
system("ls -ld /usr/local /usr/local/lib /usr/local/lib/libtcl*")
system("ls -ld /usr/local /usr/local/lib /usr/local/lib/libtcl*")
capabilities("tcltk")
library(sparr)
library(sparr)
data(fmd)
View(fmd)
fmdcas = fmd$cases
fmdcon = fmd$controls
fmdcas
View(fmdcas)
owin()
plot(Window(fmdcas))
fmdcas$window
View(fmdcon)
View(fmdcon)
fmdcas$marks
typeof(fmdcas)
class(fmdcas)
setwd('~/Desktop/Github/LocalSecurity_competition')
options(digits = 10)
options(digits = 5)
library(spatstat)
install.packages('maptools')
library(sf)
DJ <- st_read('~/Desktop/Github/LocalSecurity_competition/data/ADM_AREA/대전/LSMD_ADM_SECT_UMD_30.shp')
View(DJ)
class(DJ)
st_crs(DJ)
st_boundary(DJ)
boundary = st_boundary(DJ)
boundary
class(boundary)
bind_rows(boundary)
library(dplyr)
library(tidyr)
library(units)
bind_rows(boundary)
bind_rows(boundary)
boundary
bind_rows(DJ)
rbind(DJ)
library(mapedit)
install.packages('mapedit')
library(mapedit)
mapedit:::combine_list_of_sf(DJ$geometry)
mapedit:::combine_list_of_sf(DJ)
DJ$geometry
st_combine(DJ$geometry)
st_combine(DJ$geometry) %>% st_boundary()
class(st_combine(DJ$geometry))
boundary = st_combine(DJ$geometry)
boundary
plot(boundary)
boundary = st_combine(DJ$geometry) %>% st_boundary()
plot(boundary)
boundary = st_union(Dj$geometry)
boundary = st_union(DJ$geometry) %>% st_boundary()
st_make_valid
st_make_valid(DJ$geometry)
boundary = st_make_valid(DJ$geometry) %>% st_union()
plot(boundary)
boundary = st_make_valid(DJ$geometry) %>% st_union() %>% st_boundary()
plot(boundary)
st_is_valid(DJ$geometry)
DJ[st_is_valid(DJ$geometry)]
DJ[st_is_valid(DJ$geometry),]
DJ[c(st_is_valid(DJ$geometry)),]
DJ[~c(st_is_valid(DJ$geometry)),]
DJ[!c(st_is_valid(DJ$geometry)),]
DJ <- st_read('~/Desktop/Github/LocalSecurity_competition/data/ADM_AREA/대전/LSMD_ADM_SECT_UMD_30.shp', encoding='cp949')
View(DJ)
DJ <- st_read('~/Desktop/Github/LocalSecurity_competition/data/ADM_AREA/대전/LSMD_ADM_SECT_UMD_30.shp')
DJ <- st_read('~/Desktop/Github/LocalSecurity_competition/data/ADM_AREA/대전/LSMD_ADM_SECT_UMD_30.shp', options = "ENCODING=CP949")
DJ[!c(st_is_valid(DJ$geometry)),]
